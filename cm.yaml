apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  # 1️⃣  define a generic webhook service called "slackwf"
  service.webhook.slackwf: |
    url: https://hooks.slack.com/triggers/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
    method: POST
    headers:
    - name: Content-Type
      value: application/json

  # 2️⃣  subscribe apps globally to this webhook
  subscriptions: |
    - triggers: [on-sync-succeeded, on-sync-failed, on-health-degraded]
      recipients:
      - webhook:slackwf

  # 3️⃣  simple message templates that send JSON payload to the Slack workflow
  template.wf-on-sync: |
    webhook:
      slackwf:
        body: |
          {
            "text": "*{{.app.metadata.name}}* → {{.app.status.operationState.phase}}",
            "details": "Sync={{.app.status.sync.status}} | Health={{.app.status.health.status}} | User={{.context.user}} | Time={{.context.time}}"
          }

  template.wf-on-failed: |
    webhook:
      slackwf:
        body: |
          {
            "text": ":red_circle: *{{.app.metadata.name}}* → {{.app.status.operationState.phase}} (FAILED)",
            "details": "Error: {{.app.status.operationState.message}} | Time={{.context.time}}"
          }

  template.wf-on-degraded: |
    webhook:
      slackwf:
        body: |
          {
            "text": ":warning: *{{.app.metadata.name}}* health degraded",
            "details": "Sync={{.app.status.sync.status}} | Health={{.app.status.health.status}} | Time={{.context.time}}"
          }

  # 4️⃣  triggers map ArgoCD events to these templates
  trigger.on-sync-succeeded: |
    - send: [wf-on-sync]
      when: app.status.operationState.phase == 'Succeeded'

  trigger.on-sync-failed: |
    - send: [wf-on-failed]
      when: app.status.operationState.phase == 'Error'

  trigger.on-health-degraded: |
    - send: [wf-on-degraded]
      when: app.status.health.status == 'Degraded'
